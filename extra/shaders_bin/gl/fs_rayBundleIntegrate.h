static const uint8_t fs_rayBundleIntegrate_gl[5564] =
{
	0x46, 0x53, 0x48, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0x15, // FSH.............
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x23, // ..#version 430.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // Lod      texture
	0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // Lod.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DGrad     te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // xtureGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, // e texture2DProjL
	0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, // od  textureProjL
	0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // od.#define textu
	0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, // re2DProjGrad tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, // tureProjGrad.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // fine textureCube
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // Lod    textureLo
	0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // d.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // ureGrad.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // texture3D       
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, // e attribute in.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, // define varying i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, // n.#define bgfxSh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, //  _coord)     vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, // 4_splat(texture(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, // )).#define bgfxS
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, // hadow2DProj(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, // pler, _coord) ve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // c4_splat(texture
	0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // Proj(_sampler, _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x29, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // coord)).vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // tMul(vec3 _vec, 
	0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // mat3 _mtx) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_vec) * (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // _mtx) ); }.vec3 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, // instMul(mat3 _mt
	0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, // x, vec3 _vec) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // return ( (_mtx) 
	0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_vec) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, // c4 instMul(vec4 
	0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, // _vec, mat4 _mtx)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, //  { return ( (_ve
	0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // c) * (_mtx) ); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, // .vec4 instMul(ma
	0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, // t4 _mtx, vec4 _v
	0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // ec) { return ( (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, // _mtx) * (_vec) )
	0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, // ; }.float rcp(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _a) { return
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, //  1.0/_a; }.vec2 
	0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, // rcp(vec2 _a) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, // eturn vec2(1.0)/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec3 rcp(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec3 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec3(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // .vec4 rcp(vec4 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, // a) { return vec4
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // (1.0)/_a; }.vec2
	0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec2_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // ec2(_x, _x); }.v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, // ec3 vec3_splat(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _x) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // n vec3(_x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // x); }.vec4 vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, // { return vec4(_x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // , _x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, // .uvec2 uvec2_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec2(_x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, // x); }.uvec3 uvec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, // 3_splat(uint _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, //  { return uvec3(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, // _x, _x, _x); }.u
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // vec4 uvec4_splat
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (uint _x) { retu
	0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // rn uvec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, //  _x, _x); }.mat4
	0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, //  mtxFromRows(vec
	0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, // 4 _0, vec4 _1, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, // ec4 _2, vec4 _3)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, // .{.return transp
	0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // ose(mat4(_0, _1,
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, //  _2, _3) );.}.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, // t4 mtxFromCols(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, // 3).{.return mat4
	0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, // (_0, _1, _2, _3)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, // ;.struct RayBund
	0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // leFragment.{.vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, // 3 color;.uint of
	0x66, 0x73, 0x65, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // fset;.vec3 norma
	0x6c, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, // l;.float depth;.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x7d, // vec2 texcoord;.}
	0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, // ;.struct RayBund
	0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x0a, 0x7b, // leFragmentData.{
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x64, 0x61, 0x74, 0x61, 0x30, 0x3b, 0x0a, 0x75, 0x76, // .uvec4 data0;.uv
	0x65, 0x63, 0x34, 0x20, 0x64, 0x61, 0x74, 0x61, 0x31, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x52, 0x61, // ec4 data1;.};.Ra
	0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, // yBundleFragmentD
	0x61, 0x74, 0x61, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, // ata encodeRayBun
	0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x76, 0x65, 0x63, 0x33, // dleFragment(vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, //  color, uint off
	0x73, 0x65, 0x74, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // set, vec3 normal
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x76, // , float depth, v
	0x65, 0x63, 0x32, 0x20, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, // ec2 texcoord).{.
	0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, // RayBundleFragmen
	0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, // tData data;.data
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x78, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, // .data0.x = packH
	0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x72, 0x67, // alf2x16(color.rg
	0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x79, 0x20, // );.data.data0.y 
	0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x76, // = packHalf2x16(v
	0x65, 0x63, 0x32, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x62, 0x2c, 0x20, 0x64, 0x65, 0x70, // ec2(color.b, dep
	0x74, 0x68, 0x29, 0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, // th));.data.data0
	0x2e, 0x7a, 0x20, 0x3d, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3b, 0x0a, 0x64, 0x61, 0x74, // .z = offset;.dat
	0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, // a.data0.w = pack
	0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // Half2x16(normal.
	0x78, 0x79, 0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, // xy);.data.data1.
	0x78, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, // x = packHalf2x16
	0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x20, // (vec2(normal.z, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, // 0.0));.data.data
	0x31, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, // 1.y = packHalf2x
	0x31, 0x36, 0x28, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x64, 0x61, // 16(texcoord);.da
	0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x7a, 0x20, 0x3d, 0x20, 0x30, 0x75, 0x3b, // ta.data1.z = 0u;
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x77, 0x20, 0x3d, 0x20, // .data.data1.w = 
	0x30, 0x75, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x3b, // 0u;.return data;
	0x0a, 0x7d, 0x0a, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, // .}.RayBundleFrag
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x79, 0x42, 0x75, // ment decodeRayBu
	0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x52, 0x61, 0x79, // ndleFragment(Ray
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, // BundleFragmentDa
	0x74, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x29, 0x0a, 0x7b, 0x0a, 0x52, 0x61, 0x79, 0x42, 0x75, // ta data).{.RayBu
	0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x61, // ndleFragment fra
	0x67, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x72, 0x67, // g;.frag.color.rg
	0x20, 0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, //  = unpackHalf2x1
	0x36, 0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x78, 0x29, 0x3b, // 6(data.data0.x);
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x20, 0x3d, 0x20, 0x75, 0x6e, 0x70, // .vec2 temp = unp
	0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x64, 0x61, 0x74, 0x61, // ackHalf2x16(data
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, // .data0.y);.frag.
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x62, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x78, // color.b = temp.x
	0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x74, // ;.frag.depth = t
	0x65, 0x6d, 0x70, 0x2e, 0x79, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x6f, 0x66, 0x66, 0x73, // emp.y;.frag.offs
	0x65, 0x74, 0x20, 0x3d, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, // et = data.data0.
	0x7a, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // z;.frag.normal.x
	0x79, 0x20, 0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, // y = unpackHalf2x
	0x31, 0x36, 0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x77, 0x29, // 16(data.data0.w)
	0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, // ;.frag.normal.z 
	0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, // = unpackHalf2x16
	0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x78, 0x29, 0x2e, 0x78, // (data.data1.x).x
	0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, // ;.frag.texcoord 
	0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, // = unpackHalf2x16
	0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x79, 0x29, 0x3b, 0x0a, // (data.data1.y);.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x72, 0x61, 0x67, 0x3b, 0x0a, 0x7d, 0x0a, 0x6c, // return frag;.}.l
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, 0x62, 0x69, 0x6e, // ayout(r32ui, bin
	0x64, 0x69, 0x6e, 0x67, 0x3d, 0x34, 0x29, 0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, // ding=4) readonly
	0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x75, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, //  uniform uimage2
	0x44, 0x20, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x65, 0x61, // D s_rayBundleHea
	0x64, 0x65, 0x72, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, // der;.layout(rgba
	0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x35, 0x29, // 32ui, binding=5)
	0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  readonly unifor
	0x6d, 0x20, 0x75, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x73, 0x5f, 0x72, 0x61, 0x79, // m uimage2D s_ray
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, // BundleData;.layo
	0x75, 0x74, 0x28, 0x72, 0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, // ut(r32ui, bindin
	0x67, 0x3d, 0x36, 0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x75, 0x69, 0x6d, // g=6) uniform uim
	0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, // age2D s_rayBundl
	0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // eLightmap;.unifo
	0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, // rm vec4 u_lightm
	0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x3b, // apSize_dataSize;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x72, 0x61, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // rayNormal;.unifo
	0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x73, 0x6b, 0x79, 0x43, 0x6f, 0x6c, // rm vec4 u_skyCol
	0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3b, 0x0a, 0x69, 0x76, 0x65, 0x63, // or_enabled;.ivec
	0x32, 0x20, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, // 2 rayBundleDataU
	0x76, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x75, // v(uint offset, u
	0x69, 0x6e, 0x74, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // int pixel).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, // urn ivec2((offse
	0x74, 0x20, 0x2a, 0x20, 0x32, 0x75, 0x20, 0x2b, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x29, 0x20, // t * 2u + pixel) 
	0x25, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, // % uint(u_lightma
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, // pSize_dataSize.z
	0x29, 0x2c, 0x20, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x2a, 0x20, 0x32, 0x75, 0x20, // ), (offset * 2u 
	0x2b, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x29, 0x20, 0x2f, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, // + pixel) / uint(
	0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, // u_lightmapSize_d
	0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, // ataSize.z));.}.i
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, // vec2 rayBundleLi
	0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x76, 0x65, 0x63, // ghtmapDataUv(vec
	0x32, 0x20, 0x75, 0x76, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, // 2 uv, uint pixel
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, // ).{.return ivec2
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x76, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x34, 0x75, // (uint(uv.x) * 4u
	0x20, 0x2b, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, //  + pixel, uint(u
	0x76, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // v.y));.}.struct 
	0x4e, 0x6f, 0x64, 0x65, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // Node.{.vec3 colo
	0x72, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, // r;.float depth;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x3b, 0x0a, 0x76, 0x65, 0x63, // vec3 normal;.vec
	0x32, 0x20, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x76, // 2 texcoord;.};.v
	0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x75, 0x69, 0x6e, // oid main().{.uin
	0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, // t offset = image
	0x4c, 0x6f, 0x61, 0x64, 0x28, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, // Load(s_rayBundle
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x67, 0x6c, // Header, ivec2(gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, // _FragCoord.xy)).
	0x78, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x21, 0x3d, // x;.if (offset !=
	0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x29, 0x20, 0x7b, 0x0a, 0x4e, //  0xffffffff) {.N
	0x6f, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x36, 0x34, 0x5d, 0x3b, 0x0a, 0x75, // ode nodes[64];.u
	0x69, 0x6e, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x30, // int numNodes = 0
	0x75, 0x3b, 0x0a, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, // u;.while (offset
	0x20, 0x21, 0x3d, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x20, 0x26, //  != 0xffffffff &
	0x26, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x3c, 0x20, 0x36, 0x34, 0x29, // & numNodes < 64)
	0x20, 0x7b, 0x0a, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, //  {.RayBundleFrag
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x66, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, // mentData fragDat
	0x61, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, // a;.fragData.data
	0x30, 0x20, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x73, 0x5f, // 0 = imageLoad(s_
	0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x72, // rayBundleData, r
	0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x6f, // ayBundleDataUv(o
	0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x30, 0x75, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x72, 0x61, // ffset, 0u));.fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x20, 0x3d, 0x20, 0x69, 0x6d, // gData.data1 = im
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, // ageLoad(s_rayBun
	0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, // dleData, rayBund
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, // leDataUv(offset,
	0x20, 0x31, 0x75, 0x29, 0x29, 0x3b, 0x0a, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, //  1u));.RayBundle
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x61, 0x67, 0x20, 0x3d, 0x20, // Fragment frag = 
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, // decodeRayBundleF
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x66, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // ragment(fragData
	0x29, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, // );.nodes[numNode
	0x73, 0x5d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x2e, // s].color = frag.
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, // color;.nodes[num
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5d, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x3d, 0x20, // Nodes].normal = 
	0x66, 0x72, 0x61, 0x67, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, // frag.normal;.nod
	0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5d, 0x2e, 0x64, 0x65, 0x70, // es[numNodes].dep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, // th = frag.depth;
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5d, // .nodes[numNodes]
	0x2e, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, // .texcoord = frag
	0x2e, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, // .texcoord;.offse
	0x74, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3b, // t = frag.offset;
	0x0a, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x2b, 0x2b, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .numNodes++;.}.v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, // ec3 nodeRadiance
	0x5b, 0x36, 0x34, 0x5d, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // [64];.for (uint 
	0x69, 0x20, 0x3d, 0x20, 0x30, 0x75, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x20, 0x6e, 0x75, 0x6d, 0x4e, // i = 0u; i < numN
	0x6f, 0x64, 0x65, 0x73, 0x3b, 0x20, 0x69, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x0a, 0x66, 0x6f, 0x72, // odes; i++) {.for
	0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6a, 0x20, 0x3d, 0x20, 0x69, 0x20, 0x2b, 0x20, 0x31, //  (uint j = i + 1
	0x75, 0x3b, 0x20, 0x6a, 0x20, 0x3c, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3b, // u; j < numNodes;
	0x20, 0x6a, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6e, 0x6f, 0x64, 0x65, //  j++) {.if (node
	0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3e, 0x20, 0x6e, 0x6f, 0x64, // s[i].depth > nod
	0x65, 0x73, 0x5b, 0x6a, 0x5d, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x7c, 0x7c, 0x20, 0x28, // es[j].depth || (
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // nodes[i].depth =
	0x3d, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6a, 0x5d, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, // = nodes[j].depth
	0x20, 0x26, 0x26, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x69, 0x5d, //  && dot(nodes[i]
	0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x75, 0x5f, 0x72, 0x61, 0x79, 0x4e, 0x6f, // .normal, u_rayNo
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x29, // rmal.xyz) > 0.0)
	0x29, 0x20, 0x7b, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x20, 0x3d, 0x20, // ) {.Node temp = 
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x69, 0x5d, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, // nodes[i];.nodes[
	0x69, 0x5d, 0x20, 0x3d, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6a, 0x5d, 0x3b, 0x0a, 0x6e, // i] = nodes[j];.n
	0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6a, 0x5d, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x3b, 0x0a, // odes[j] = temp;.
	0x7d, 0x0a, 0x7d, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, // }.}.nodeRadiance
	0x5b, 0x69, 0x5d, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // [i] = vec3_splat
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6e, 0x75, 0x6d, // (0.0);.}.if (num
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x3e, 0x3d, 0x20, 0x32, 0x75, 0x29, 0x20, 0x7b, 0x0a, 0x66, // Nodes >= 2u) {.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x64, 0x66, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x3b, // loat brdf = 1.0;
	0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x20, 0x3d, 0x20, 0x30, // .for (uint i = 0
	0x75, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x20, // u; i < numNodes 
	0x2d, 0x20, 0x31, 0x75, 0x3b, 0x20, 0x69, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // - 1u; i++) {.flo
	0x61, 0x74, 0x20, 0x6e, 0x31, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, // at n1cosTheta = 
	0x64, 0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x69, 0x20, 0x2b, 0x20, 0x30, 0x75, // dot(nodes[i + 0u
	0x5d, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x75, 0x5f, 0x72, 0x61, 0x79, 0x4e, // ].normal, u_rayN
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ormal.xyz);.floa
	0x74, 0x20, 0x6e, 0x32, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x64, // t n2cosTheta = d
	0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x69, 0x20, 0x2b, 0x20, 0x31, 0x75, 0x5d, // ot(nodes[i + 1u]
	0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x2d, 0x75, 0x5f, 0x72, 0x61, 0x79, 0x4e, // .normal, -u_rayN
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // ormal.xyz);.if (
	0x6e, 0x31, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, // n1cosTheta > 0.0
	0x20, 0x26, 0x26, 0x20, 0x6e, 0x32, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3e, //  && n2cosTheta >
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, //  0.0) {.float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x6e, 0x31, 0x63, 0x6f, 0x73, 0x54, 0x68, // sTheta = n1cosTh
	0x65, 0x74, 0x61, 0x20, 0x2a, 0x20, 0x6e, 0x32, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, // eta * n2cosTheta
	0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5b, 0x69, // ;.nodeRadiance[i
	0x20, 0x2b, 0x20, 0x30, 0x75, 0x5d, 0x20, 0x3d, 0x20, 0x62, 0x72, 0x64, 0x66, 0x20, 0x2a, 0x20, //  + 0u] = brdf * 
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x69, 0x20, 0x2b, 0x20, 0x31, 0x75, 0x5d, 0x2e, 0x63, 0x6f, // nodes[i + 1u].co
	0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x3b, 0x0a, // lor * cosTheta;.
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5b, 0x69, 0x20, 0x2b, // nodeRadiance[i +
	0x20, 0x31, 0x75, 0x5d, 0x20, 0x3d, 0x20, 0x62, 0x72, 0x64, 0x66, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  1u] = brdf * no
	0x64, 0x65, 0x73, 0x5b, 0x69, 0x20, 0x2b, 0x20, 0x30, 0x75, 0x5d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, // des[i + 0u].colo
	0x72, 0x20, 0x2a, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x3b, 0x0a, 0x7d, 0x0a, // r * cosTheta;.}.
	0x7d, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, 0x73, // }.}.if (uint(u_s
	0x6b, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, // kyColor_enabled.
	0x77, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x75, 0x20, 0x26, 0x26, 0x20, 0x6e, 0x75, 0x6d, 0x4e, // w) != 0u && numN
	0x6f, 0x64, 0x65, 0x73, 0x20, 0x3e, 0x20, 0x30, 0x75, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x66, 0x20, // odes > 0u) {.if 
	0x28, 0x64, 0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x30, 0x75, 0x5d, 0x2e, 0x6e, // (dot(nodes[0u].n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x2d, 0x75, 0x5f, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x72, // ormal, -u_rayNor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, // mal.xyz) > 0.0).
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5b, 0x30, 0x75, 0x5d, // nodeRadiance[0u]
	0x20, 0x3d, 0x20, 0x75, 0x5f, 0x73, 0x6b, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x65, 0x6e, //  = u_skyColor_en
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x64, // abled.rgb;.if (d
	0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, // ot(nodes[numNode
	0x73, 0x20, 0x2d, 0x20, 0x31, 0x75, 0x5d, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, // s - 1u].normal, 
	0x75, 0x5f, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x29, // u_rayNormal.xyz)
	0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, //  > 0.0).nodeRadi
	0x61, 0x6e, 0x63, 0x65, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x2d, 0x20, // ance[numNodes - 
	0x31, 0x75, 0x5d, 0x20, 0x3d, 0x20, 0x75, 0x5f, 0x73, 0x6b, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 1u] = u_skyColor
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // _enabled.rgb;.}.
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6a, 0x20, 0x3d, 0x20, 0x30, 0x75, // for (uint j = 0u
	0x3b, 0x20, 0x6a, 0x20, 0x3c, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3b, 0x20, // ; j < numNodes; 
	0x6a, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // j++) {.vec3 colo
	0x72, 0x20, 0x3d, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, // r = nodeRadiance
	0x5b, 0x6a, 0x5d, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x6e, // [j];.vec2 uv = n
	0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6a, 0x5d, 0x2e, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // odes[j].texcoord
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x75, 0x76, 0x2e, 0x78, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, // ;.if (uv.x > 0.0
	0x20, 0x26, 0x26, 0x20, 0x75, 0x76, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, //  && uv.y > 0.0) 
	0x7b, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x64, // {.imageAtomicAdd
	0x28, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, // (s_rayBundleLigh
	0x74, 0x6d, 0x61, 0x70, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, // tmap, rayBundleL
	0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x75, 0x76, // ightmapDataUv(uv
	0x2c, 0x20, 0x30, 0x75, 0x29, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // , 0u), uint(colo
	0x72, 0x2e, 0x72, 0x20, 0x2a, 0x20, 0x32, 0x35, 0x35, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x69, // r.r * 255.0));.i
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x64, 0x28, 0x73, 0x5f, // mageAtomicAdd(s_
	0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, // rayBundleLightma
	0x70, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, // p, rayBundleLigh
	0x74, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x75, 0x76, 0x2c, 0x20, 0x31, // tmapDataUv(uv, 1
	0x75, 0x29, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x67, // u), uint(color.g
	0x20, 0x2a, 0x20, 0x32, 0x35, 0x35, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x69, 0x6d, 0x61, 0x67, //  * 255.0));.imag
	0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x64, 0x28, 0x73, 0x5f, 0x72, 0x61, 0x79, // eAtomicAdd(s_ray
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x2c, 0x20, // BundleLightmap, 
	0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, // rayBundleLightma
	0x70, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x75, 0x76, 0x2c, 0x20, 0x32, 0x75, 0x29, 0x2c, // pDataUv(uv, 2u),
	0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x62, 0x20, 0x2a, 0x20, //  uint(color.b * 
	0x32, 0x35, 0x35, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, // 255.0));.imageAt
	0x6f, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x64, 0x28, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, // omicAdd(s_rayBun
	0x64, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x2c, 0x20, 0x72, 0x61, 0x79, // dleLightmap, ray
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x44, 0x61, // BundleLightmapDa
	0x74, 0x61, 0x55, 0x76, 0x28, 0x75, 0x76, 0x2c, 0x20, 0x33, 0x75, 0x29, 0x2c, 0x20, 0x31, 0x75, // taUv(uv, 3u), 1u
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x00,                         // );.}.}.}.}..
};
