static const uint8_t RayBundleIntegrate_fragment_gl[3450] =
{
	0x46, 0x53, 0x48, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x0d, // FSH...........g.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x23, // ..#version 430.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // Lod      texture
	0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // Lod.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DGrad     te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // xtureGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, // e texture2DProjL
	0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, // od  textureProjL
	0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // od.#define textu
	0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, // re2DProjGrad tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, // tureProjGrad.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // fine textureCube
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // Lod    textureLo
	0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // d.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // ureGrad.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // texture3D       
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, // e attribute in.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, // define varying i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, // n.#define bgfxSh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, //  _coord)     vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, // 4_splat(texture(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, // )).#define bgfxS
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, // hadow2DProj(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, // pler, _coord) ve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // c4_splat(texture
	0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // Proj(_sampler, _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x29, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // coord)).vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // tMul(vec3 _vec, 
	0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // mat3 _mtx) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_vec) * (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // _mtx) ); }.vec3 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, // instMul(mat3 _mt
	0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, // x, vec3 _vec) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // return ( (_mtx) 
	0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_vec) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, // c4 instMul(vec4 
	0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, // _vec, mat4 _mtx)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, //  { return ( (_ve
	0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // c) * (_mtx) ); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, // .vec4 instMul(ma
	0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, // t4 _mtx, vec4 _v
	0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // ec) { return ( (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, // _mtx) * (_vec) )
	0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, // ; }.float rcp(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _a) { return
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, //  1.0/_a; }.vec2 
	0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, // rcp(vec2 _a) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, // eturn vec2(1.0)/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec3 rcp(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec3 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec3(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // .vec4 rcp(vec4 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, // a) { return vec4
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // (1.0)/_a; }.vec2
	0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec2_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // ec2(_x, _x); }.v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, // ec3 vec3_splat(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _x) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // n vec3(_x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // x); }.vec4 vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, // { return vec4(_x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // , _x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, // .uvec2 uvec2_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec2(_x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, // x); }.uvec3 uvec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, // 3_splat(uint _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, //  { return uvec3(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, // _x, _x, _x); }.u
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // vec4 uvec4_splat
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (uint _x) { retu
	0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // rn uvec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, //  _x, _x); }.mat4
	0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, //  mtxFromRows(vec
	0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, // 4 _0, vec4 _1, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, // ec4 _2, vec4 _3)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, // .{.return transp
	0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // ose(mat4(_0, _1,
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, //  _2, _3) );.}.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, // t4 mtxFromCols(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, // 3).{.return mat4
	0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, // (_0, _1, _2, _3)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, // ;.layout(r32ui, 
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x34, 0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, // binding=4) unifo
	0x72, 0x6d, 0x20, 0x75, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x72, 0x61, // rm uimage2D u_ra
	0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, // yBundleHeaderSam
	0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, // pler;.layout(rgb
	0x61, 0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x35, // a32ui, binding=5
	0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x75, 0x69, 0x6d, 0x61, 0x67, 0x65, // ) uniform uimage
	0x32, 0x44, 0x20, 0x75, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, // 2D u_rayBundleDa
	0x74, 0x61, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, // taSampler;.layou
	0x74, 0x28, 0x72, 0x67, 0x62, 0x61, 0x33, 0x32, 0x66, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, // t(rgba32f, bindi
	0x6e, 0x67, 0x3d, 0x36, 0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x6d, // ng=6) uniform im
	0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, // age2D u_lightmap
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // Sampler;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, //  vec4 u_lightmap
	0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x69, // Size_dataSize;.i
	0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x75, 0x69, 0x6e, 0x74, // vec2 dataUv(uint
	0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x70, 0x69, //  offset, uint pi
	0x78, 0x65, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x69, 0x76, // xel).{.return iv
	0x65, 0x63, 0x32, 0x28, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x2a, 0x20, 0x33, 0x75, // ec2((offset * 3u
	0x20, 0x2b, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x29, 0x20, 0x25, 0x20, 0x75, 0x69, 0x6e, 0x74, //  + pixel) % uint
	0x28, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, // (u_lightmapSize_
	0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, 0x2c, 0x20, 0x28, 0x6f, 0x66, // dataSize.z), (of
	0x66, 0x73, 0x65, 0x74, 0x20, 0x2a, 0x20, 0x33, 0x75, 0x20, 0x2b, 0x20, 0x70, 0x69, 0x78, 0x65, // fset * 3u + pixe
	0x6c, 0x29, 0x20, 0x2f, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, // l) / uint(u_ligh
	0x74, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, // tmapSize_dataSiz
	0x65, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // e.z));.}.struct 
	0x4e, 0x6f, 0x64, 0x65, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // Node.{.vec3 colo
	0x72, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, // r;.float depth;.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x7d, // vec2 texcoord;.}
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, // ;.void main().{.
	0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, // ivec2 uv = ivec2
	0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, // (gl_FragCoord.xy
	0x29, 0x3b, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, // );.uint offset =
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x72, 0x61, 0x79, //  imageLoad(u_ray
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, // BundleHeaderSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x75, 0x76, 0x29, 0x2e, 0x78, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // ler, uv).x;.if (
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, // offset != 0xffff
	0x66, 0x66, 0x66, 0x66, 0x29, 0x20, 0x7b, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x64, // ffff) {.Node nod
	0x65, 0x73, 0x5b, 0x31, 0x36, 0x5d, 0x3b, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6e, 0x75, 0x6d, // es[16];.uint num
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x30, 0x75, 0x3b, 0x0a, 0x77, 0x68, 0x69, 0x6c, // Nodes = 0u;.whil
	0x65, 0x20, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x78, 0x66, // e (offset != 0xf
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x20, 0x26, 0x26, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, // fffffff && numNo
	0x64, 0x65, 0x73, 0x20, 0x3c, 0x20, 0x31, 0x36, 0x29, 0x20, 0x7b, 0x0a, 0x75, 0x76, 0x65, 0x63, // des < 16) {.uvec
	0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, // 4 color_offset =
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x72, 0x61, 0x79, //  imageLoad(u_ray
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // BundleDataSample
	0x72, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, // r, dataUv(offset
	0x2c, 0x20, 0x30, 0x75, 0x29, 0x29, 0x3b, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6e, 0x6f, // , 0u));.uvec4 no
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x69, 0x6d, 0x61, // rmal_depth = ima
	0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, // geLoad(u_rayBund
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x64, // leDataSampler, d
	0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x31, 0x75, // ataUv(offset, 1u
	0x29, 0x29, 0x3b, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ));.uvec4 texcoo
	0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, // rd = imageLoad(u
	0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x61, // _rayBundleDataSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x6f, 0x66, // mpler, dataUv(of
	0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x32, 0x75, 0x29, 0x29, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, // fset, 2u));.node
	0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, // s[numNodes].colo
	0x72, 0x2e, 0x72, 0x20, 0x3d, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, // r.r = uintBitsTo
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, // Float(color_offs
	0x65, 0x74, 0x2e, 0x72, 0x29, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, // et.r);.nodes[num
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x67, 0x20, 0x3d, // Nodes].color.g =
	0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, //  uintBitsToFloat
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x67, 0x29, // (color_offset.g)
	0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, // ;.nodes[numNodes
	0x5d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x62, 0x20, 0x3d, 0x20, 0x75, 0x69, 0x6e, 0x74, // ].color.b = uint
	0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // BitsToFloat(colo
	0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x62, 0x29, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, // r_offset.b);.nod
	0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5d, 0x2e, 0x64, 0x65, 0x70, // es[numNodes].dep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, // th = uintBitsToF
	0x6c, 0x6f, 0x61, 0x74, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, // loat(normal_dept
	0x68, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6e, 0x75, 0x6d, 0x4e, // h.w);.nodes[numN
	0x6f, 0x64, 0x65, 0x73, 0x5d, 0x2e, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, // odes].texcoord =
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, //  vec2(uintBitsTo
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, // Float(texcoord.x
	0x29, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, // ), uintBitsToFlo
	0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x29, 0x29, 0x3b, // at(texcoord.y));
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, // .offset = color_
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x77, 0x3b, 0x0a, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, // offset.w;.numNod
	0x65, 0x73, 0x2b, 0x2b, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, // es++;.}.for (uin
	0x74, 0x20, 0x69, 0x20, 0x3d, 0x20, 0x30, 0x75, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x20, 0x6e, 0x75, // t i = 0u; i < nu
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3b, 0x20, 0x69, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x0a, 0x66, // mNodes; i++) {.f
	0x6f, 0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6a, 0x20, 0x3d, 0x20, 0x69, 0x20, 0x2b, // or (uint j = i +
	0x20, 0x31, 0x75, 0x3b, 0x20, 0x6a, 0x20, 0x3c, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, //  1u; j < numNode
	0x73, 0x3b, 0x20, 0x6a, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6e, 0x6f, // s; j++) {.if (no
	0x64, 0x65, 0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3e, 0x20, 0x6e, // des[i].depth > n
	0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6a, 0x5d, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x29, 0x20, 0x7b, // odes[j].depth) {
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x20, 0x3d, 0x20, 0x6e, 0x6f, 0x64, // .Node temp = nod
	0x65, 0x73, 0x5b, 0x69, 0x5d, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x69, 0x5d, 0x20, // es[i];.nodes[i] 
	0x3d, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5b, 0x6a, 0x5d, 0x3b, 0x0a, 0x6e, 0x6f, 0x64, 0x65, // = nodes[j];.node
	0x73, 0x5b, 0x6a, 0x5d, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // s[j] = temp;.}.}
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .}.vec3 color = 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, // vec3_splat(0.0);
	0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6a, 0x20, 0x3d, 0x20, 0x30, // .for (uint j = 0
	0x75, 0x3b, 0x20, 0x6a, 0x20, 0x3c, 0x20, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3b, // u; j < numNodes;
	0x20, 0x6a, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, //  j++) {.color = 
	0x6d, 0x69, 0x78, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, // mix(color, nodes
	0x5b, 0x6a, 0x5d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x3b, // [j].color, 0.5);
	0x0a, 0x7d, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, // .}.imageStore(u_
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // lightmapSampler,
	0x20, 0x75, 0x76, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, //  uv, vec4(color,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, //  1.0));.} else {
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x6c, 0x69, // .imageStore(u_li
	0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x75, // ghtmapSampler, u
	0x76, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, // v, vec4_splat(0.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x00,                                     // 0));.}.}..
};
