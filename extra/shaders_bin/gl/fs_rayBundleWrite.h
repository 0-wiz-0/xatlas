static const uint8_t fs_rayBundleWrite_gl[4520] =
{
	0x46, 0x53, 0x48, 0x06, 0x91, 0xb0, 0x36, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x11, // FSH...6.........
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x23, // ..#version 430.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // Lod      texture
	0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // Lod.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DGrad     te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // xtureGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, // e texture2DProjL
	0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, // od  textureProjL
	0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // od.#define textu
	0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, // re2DProjGrad tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, // tureProjGrad.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // fine textureCube
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // Lod    textureLo
	0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // d.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // ureGrad.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // texture3D       
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, // e attribute in.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, // define varying i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, // n.#define bgfxSh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, //  _coord)     vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, // 4_splat(texture(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, // )).#define bgfxS
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, // hadow2DProj(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, // pler, _coord) ve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // c4_splat(texture
	0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // Proj(_sampler, _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, // coord)).varying 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x3b, 0x0a, 0x76, // vec3 v_normal;.v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x5f, 0x74, 0x65, // arying vec4 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, // xcoord0;.vec3 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec3 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat3 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_mtx) ); }.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, //  instMul(mat3 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec3 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_vec) ); }.v
	0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, // ec4 instMul(vec4
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, //  _vec, mat4 _mtx
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, // ) { return ( (_v
	0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, // ec) * (_mtx) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, // }.vec4 instMul(m
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // at4 _mtx, vec4 _
	0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // vec) { return ( 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // (_mtx) * (_vec) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, // ); }.float rcp(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _a) { retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // n 1.0/_a; }.vec2
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec2 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec2(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, // /_a; }.vec3 rcp(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _a) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, // n vec3(1.0)/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, // }.vec4 rcp(vec4 
	0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _a) { return vec
	0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // 4(1.0)/_a; }.vec
	0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 2 vec2_splat(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // vec2(_x, _x); }.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec3 vec3_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // rn vec3(_x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, // _x); }.vec4 vec4
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, //  { return vec4(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // x, _x, _x, _x); 
	0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, // }.uvec2 uvec2_sp
	0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // lat(uint _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, // eturn uvec2(_x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, // _x); }.uvec3 uve
	0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, // c3_splat(uint _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ) { return uvec3
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec4 uvec4_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec4(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // , _x, _x); }.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromRows(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat4(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // , _2, _3) );.}.m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, // at4 mtxFromCols(
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, // vec4 _0, vec4 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _2, vec4 
	0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _3).{.return mat
	0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, // 4(_0, _1, _2, _3
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // );.}.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // 4 u_viewRect;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform vec4 u_vie
	0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // wTexel;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // mat4 u_view;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, // form mat4 u_invV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // 4 u_proj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, // m mat4 u_invProj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // _viewProj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, // rm mat4 u_invVie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, // at4 u_model[32];
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // modelView;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // iewProj;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, //  vec4 u_alphaRef
	0x34, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, // 4;.struct RayBun
	0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // dleFragment.{.ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, // c3 color;.uint o
	0x66, 0x66, 0x73, 0x65, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ffset;.vec3 norm
	0x61, 0x6c, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, // al;.float depth;
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, // .vec2 texcoord;.
	0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, // };.struct RayBun
	0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x0a, // dleFragmentData.
	0x7b, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x64, 0x61, 0x74, 0x61, 0x30, 0x3b, 0x0a, 0x75, // {.uvec4 data0;.u
	0x76, 0x65, 0x63, 0x34, 0x20, 0x64, 0x61, 0x74, 0x61, 0x31, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x52, // vec4 data1;.};.R
	0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, // ayBundleFragment
	0x44, 0x61, 0x74, 0x61, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x79, 0x42, 0x75, // Data encodeRayBu
	0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x76, 0x65, 0x63, // ndleFragment(vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, // 3 color, uint of
	0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // fset, vec3 norma
	0x6c, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // l, float depth, 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, // vec2 texcoord).{
	0x0a, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, // .RayBundleFragme
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x3b, 0x0a, 0x64, 0x61, 0x74, // ntData data;.dat
	0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x78, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, // a.data0.x = pack
	0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x72, // Half2x16(color.r
	0x67, 0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x79, // g);.data.data0.y
	0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, //  = packHalf2x16(
	0x76, 0x65, 0x63, 0x32, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x62, 0x2c, 0x20, 0x64, 0x65, // vec2(color.b, de
	0x70, 0x74, 0x68, 0x29, 0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, // pth));.data.data
	0x30, 0x2e, 0x7a, 0x20, 0x3d, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3b, 0x0a, 0x64, 0x61, // 0.z = offset;.da
	0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, // ta.data0.w = pac
	0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // kHalf2x16(normal
	0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, // .xy);.data.data1
	0x2e, 0x78, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, // .x = packHalf2x1
	0x36, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // 6(vec2(normal.z,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, //  0.0));.data.dat
	0x61, 0x31, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, // a1.y = packHalf2
	0x78, 0x31, 0x36, 0x28, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x64, // x16(texcoord);.d
	0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x7a, 0x20, 0x3d, 0x20, 0x30, 0x75, // ata.data1.z = 0u
	0x3b, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x77, 0x20, 0x3d, // ;.data.data1.w =
	0x20, 0x30, 0x75, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, //  0u;.return data
	0x3b, 0x0a, 0x7d, 0x0a, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, // ;.}.RayBundleFra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x79, 0x42, // gment decodeRayB
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x52, 0x61, // undleFragment(Ra
	0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, // yBundleFragmentD
	0x61, 0x74, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x29, 0x0a, 0x7b, 0x0a, 0x52, 0x61, 0x79, 0x42, // ata data).{.RayB
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, // undleFragment fr
	0x61, 0x67, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x72, // ag;.frag.color.r
	0x67, 0x20, 0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, // g = unpackHalf2x
	0x31, 0x36, 0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x78, 0x29, // 16(data.data0.x)
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x20, 0x3d, 0x20, 0x75, 0x6e, // ;.vec2 temp = un
	0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x64, 0x61, 0x74, // packHalf2x16(dat
	0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, // a.data0.y);.frag
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x62, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x2e, // .color.b = temp.
	0x78, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, // x;.frag.depth = 
	0x74, 0x65, 0x6d, 0x70, 0x2e, 0x79, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x6f, 0x66, 0x66, // temp.y;.frag.off
	0x73, 0x65, 0x74, 0x20, 0x3d, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, // set = data.data0
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .z;.frag.normal.
	0x78, 0x79, 0x20, 0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, // xy = unpackHalf2
	0x78, 0x31, 0x36, 0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x30, 0x2e, 0x77, // x16(data.data0.w
	0x29, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // );.frag.normal.z
	0x20, 0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, //  = unpackHalf2x1
	0x36, 0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x78, 0x29, 0x2e, // 6(data.data1.x).
	0x78, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x2e, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // x;.frag.texcoord
	0x20, 0x3d, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, //  = unpackHalf2x1
	0x36, 0x28, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x31, 0x2e, 0x79, 0x29, 0x3b, // 6(data.data1.y);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x72, 0x61, 0x67, 0x3b, 0x0a, 0x7d, 0x0a, // .return frag;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x65, 0x76, // D s_lightmapPrev
	0x50, 0x61, 0x73, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Pass;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, // mpler2D s_diffus
	0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // e;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3b, // er2D s_emission;
	0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, 0x62, // .layout(r32ui, b
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x34, 0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // inding=4) unifor
	0x6d, 0x20, 0x75, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x73, 0x5f, 0x61, 0x74, 0x6f, // m uimage2D s_ato
	0x6d, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, // micCounter;.layo
	0x75, 0x74, 0x28, 0x72, 0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, // ut(r32ui, bindin
	0x67, 0x3d, 0x35, 0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x75, 0x69, 0x6d, // g=5) uniform uim
	0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, // age2D s_rayBundl
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, // eHeader;.layout(
	0x72, 0x67, 0x62, 0x61, 0x33, 0x32, 0x75, 0x69, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, // rgba32ui, bindin
	0x67, 0x3d, 0x36, 0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x75, 0x69, 0x6d, // g=6) uniform uim
	0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, // age2D s_rayBundl
	0x65, 0x44, 0x61, 0x74, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // eData;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x3b, 0x0a, 0x75, // ec4 u_diffuse;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x65, 0x6d, // niform vec4 u_em
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ission;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, // vec4 u_shade_dif
	0x66, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, // fuse_emission;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x61, // niform vec4 u_pa
	0x73, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ss;.uniform vec4
	0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, //  u_lightmapSize_
	0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, // dataSize;.ivec2 
	0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, // rayBundleDataUv(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x75, 0x69, 0x6e, // uint offset, uin
	0x74, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t pixel).{.retur
	0x6e, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, // n ivec2((offset 
	0x2a, 0x20, 0x32, 0x75, 0x20, 0x2b, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x29, 0x20, 0x25, 0x20, // * 2u + pixel) % 
	0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x53, // uint(u_lightmapS
	0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, 0x2c, // ize_dataSize.z),
	0x20, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x2a, 0x20, 0x32, 0x75, 0x20, 0x2b, 0x20, //  (offset * 2u + 
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x29, 0x20, 0x2f, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, // pixel) / uint(u_
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, // lightmapSize_dat
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // aSize.z));.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x28, // color;.if (uint(
	0x75, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x78, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x75, 0x29, // u_pass.x) == 0u)
	0x20, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, //  {.vec3 emission
	0x20, 0x3d, 0x20, 0x75, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x67, //  = u_emission.rg
	0x62, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, 0x73, 0x68, // b;.if (uint(u_sh
	0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x6d, 0x69, 0x73, // ade_diffuse_emis
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x7a, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x75, 0x29, 0x0a, 0x65, // sion.z) == 1u).e
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // mission *= textu
	0x72, 0x65, 0x28, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x76, // re(s_emission, v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x79, 0x29, 0x2e, 0x72, // _texcoord0.xy).r
	0x67, 0x62, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x65, 0x6d, 0x69, 0x73, // gb;.color = emis
	0x73, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x69, // sion;.}.else {.i
	0x66, 0x20, 0x28, 0x75, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x20, // f (u_emission.r 
	0x3e, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x75, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, // > 0.0 || u_emiss
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x75, // ion.g > 0.0 || u
	0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x20, 0x3e, 0x20, 0x30, 0x2e, // _emission.b > 0.
	0x30, 0x29, 0x20, 0x7b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // 0) {.color = vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 3_splat(0.0);.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x64, 0x69, 0x66, 0x66, // else {.vec3 diff
	0x75, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x75, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x2e, // use = u_diffuse.
	0x72, 0x67, 0x62, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, // rgb;.if (uint(u_
	0x73, 0x68, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x6d, // shade_diffuse_em
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x79, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x75, 0x29, // ission.y) == 1u)
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x2a, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // .diffuse *= text
	0x75, 0x72, 0x65, 0x28, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x2c, 0x20, 0x76, // ure(s_diffuse, v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x79, 0x29, 0x2e, 0x72, // _texcoord0.xy).r
	0x67, 0x62, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x64, 0x69, 0x66, 0x66, // gb;.color = diff
	0x75, 0x73, 0x65, 0x2e, 0x72, 0x67, 0x62, 0x20, 0x2a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // use.rgb * textur
	0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x65, 0x76, // e(s_lightmapPrev
	0x50, 0x61, 0x73, 0x73, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // Pass, v_texcoord
	0x30, 0x2e, 0x7a, 0x77, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x75, // 0.zw).rgb;.}.}.u
	0x69, 0x6e, 0x74, 0x20, 0x6e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, 0x20, // int newOffset = 
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x64, 0x28, 0x73, // imageAtomicAdd(s
	0x5f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2c, 0x20, // _atomicCounter, 
	0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x30, 0x29, 0x2c, 0x20, 0x31, 0x75, 0x29, // ivec2(0, 0), 1u)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, // ;.if (newOffset 
	0x3e, 0x3d, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, // >= uint(u_lightm
	0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x2e, // apSize_dataSize.
	0x7a, 0x29, 0x20, 0x2a, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, // z) * uint(u_ligh
	0x74, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, // tmapSize_dataSiz
	0x65, 0x2e, 0x7a, 0x29, 0x20, 0x2a, 0x20, 0x33, 0x75, 0x29, 0x20, 0x7b, 0x0a, 0x64, 0x69, 0x73, // e.z) * 3u) {.dis
	0x63, 0x61, 0x72, 0x64, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, // card;.return;.}.
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x6c, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, // uint oldOffset =
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x45, 0x78, 0x63, 0x68, //  imageAtomicExch
	0x61, 0x6e, 0x67, 0x65, 0x28, 0x73, 0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, // ange(s_rayBundle
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x67, 0x6c, // Header, ivec2(gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x29, 0x2c, 0x20, // _FragCoord.xy), 
	0x6e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, 0x3b, 0x0a, 0x52, 0x61, 0x79, 0x42, // newOffset);.RayB
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, // undleFragmentDat
	0x61, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x3d, // a fragmentData =
	0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, //  encodeRayBundle
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, // Fragment(color, 
	0x6f, 0x6c, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x76, 0x5f, 0x6e, 0x6f, 0x72, // oldOffset, v_nor
	0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, // mal, gl_FragCoor
	0x64, 0x2e, 0x7a, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // d.z, v_texcoord0
	0x2e, 0x7a, 0x77, 0x20, 0x2a, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, // .zw * u_lightmap
	0x53, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, // Size_dataSize.xy
	0x29, 0x3b, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x73, 0x5f, // );.imageStore(s_
	0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x72, // rayBundleData, r
	0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, 0x6e, // ayBundleDataUv(n
	0x65, 0x77, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x30, 0x75, 0x29, 0x2c, 0x20, 0x66, // ewOffset, 0u), f
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, // ragmentData.data
	0x30, 0x29, 0x3b, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x73, // 0);.imageStore(s
	0x5f, 0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2c, 0x20, // _rayBundleData, 
	0x72, 0x61, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x76, 0x28, // rayBundleDataUv(
	0x6e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x31, 0x75, 0x29, 0x2c, 0x20, // newOffset, 1u), 
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, // fragmentData.dat
	0x61, 0x31, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // a1);.}..
};
